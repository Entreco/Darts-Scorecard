apply plugin: "jacoco"
apply plugin: "build-dashboard"

// Creates tasks based on the application build variant (productFlavor + buildType = variant)
android.libraryVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/BR.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/databinding/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/*Factory.class',
                         '**/*inlined*.class',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class']

    // Generates Lint reports based off the source code.
    variant.assemble.dependsOn "lint$variantName"

    /**
     * Generates Jacoco coverage reports based off the unit tests.
     */
    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group "Reporting"
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        // variant.javaCompile.source does not work
        // traverses from starting point
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: autoGenerated)
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: autoGenerated)
        sourceDirectories = files([debugTree], [kotlinDebugTree])
        executionData = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
        classDirectories = files([debugTree], [kotlinDebugTree], autoGenerated)
    }
}

//// Only allows specifying of a single file
//coveralls {
//    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoDebugReport/jacocoDebugReport.xml"
//}